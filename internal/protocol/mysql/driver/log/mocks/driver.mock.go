// Code generated by MockGen. DO NOT EDIT.
// Source: ./driver_test.go
//
// Generated by this command:
//
//	mockgen -source=./driver_test.go -destination=mocks/driver.mock.go -package=logmocks -typed Driver
//
// Package logmocks is a generated GoMock package.
package logmocks

import (
	driver "database/sql/driver"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDriver is a mock of Driver interface.
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance.
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockDriver) Open(name string) (driver.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name)
	ret0, _ := ret[0].(driver.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockDriverMockRecorder) Open(name any) *DriverOpenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDriver)(nil).Open), name)
	return &DriverOpenCall{Call: call}
}

// DriverOpenCall wrap *gomock.Call
type DriverOpenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *DriverOpenCall) Return(arg0 driver.Conn, arg1 error) *DriverOpenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *DriverOpenCall) Do(f func(string) (driver.Conn, error)) *DriverOpenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *DriverOpenCall) DoAndReturn(f func(string) (driver.Conn, error)) *DriverOpenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenConnector mocks base method.
func (m *MockDriver) OpenConnector(name string) (driver.Connector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenConnector", name)
	ret0, _ := ret[0].(driver.Connector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenConnector indicates an expected call of OpenConnector.
func (mr *MockDriverMockRecorder) OpenConnector(name any) *DriverOpenConnectorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenConnector", reflect.TypeOf((*MockDriver)(nil).OpenConnector), name)
	return &DriverOpenConnectorCall{Call: call}
}

// DriverOpenConnectorCall wrap *gomock.Call
type DriverOpenConnectorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *DriverOpenConnectorCall) Return(arg0 driver.Connector, arg1 error) *DriverOpenConnectorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *DriverOpenConnectorCall) Do(f func(string) (driver.Connector, error)) *DriverOpenConnectorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *DriverOpenConnectorCall) DoAndReturn(f func(string) (driver.Connector, error)) *DriverOpenConnectorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
